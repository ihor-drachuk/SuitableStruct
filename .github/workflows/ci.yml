name: Build & test

on:
  push:
    branches:
      - '**'
  pull_request:
    types: [opened, edited, synchronize]

jobs:
  Build:
    strategy:
      fail-fast: false
      matrix:
        os: [linux]
        compiler: [gcc, clang]
        test_libs: [tl_preinstalled, tl_missing]
        qt: [qt_no, qt_5.15.2, qt_6.6.1]
        build_type: [Debug, Release]
#        include:
#          - os: windows
#            compiler: msvc2019
#            arch: x64
#            test_libs: tl_preinstalled
#            qt: qt_5.15.2
#            build_type: Debug
#        include:
#          - os: windows
#            compiler: msvc2019
#            arch: x86
#            test_libs: tl_preinstalled
#            qt: qt_5.15.2
#            build_type: Debug
#        include:
#          - os: windows
#            compiler: msvc2022
#            arch: x64
#            test_libs: tl_preinstalled
#            qt: qt_5.15.2
#            build_type: Debug
#        include:
#          - os: windows
#            compiler: msvc2019
#            arch: x64
#            test_libs: tl_preinstalled
#            qt: qt_5.15.2
#            build_type: Debug

    runs-on: ${{ matrix.os == 'linux' && 'ubuntu-latest' || matrix.os == 'windows' && 'windows-latest' || matrix.os == 'macos' && 'macos-latest' }}

    container:
      image: ihordrachuk/id-build-env:${{ matrix.os }}-${{ matrix.compiler }}-${{ matrix.test_libs }}-${{ matrix.qt }}-${{ matrix.arch || 'default' }}
      options: --workdir ${{ github.workspace }}

    if: "!contains(github.event.head_commit.message, 'CI skip') && !contains(github.event.head_commit.message, 'Skip CI')"
    timeout-minutes: 30

    steps:
      - name: "Set OS-specific values (Linux)"
        if: ${{ runner.os == 'linux' }}
        shell: bash
        run: |
         echo "GENERATOR=Unix Makefiles" >> $GITHUB_ENV
         echo "CORES=$(nproc --all)" >> $GITHUB_ENV
         echo "WORKSPACE=$(pwd)" >> $GITHUB_ENV

      - name: Set architecture-specific values (Windows)
        if: matrix.os == 'windows'
        shell: bash
        run: |
          if [ "${{ matrix.arch }}" == "x86" ]; then
            echo "ARCH_FLAGS=-A Win32" >> $GITHUB_ENV
          else
            echo "ARCH_FLAGS=-A x64" >> $GITHUB_ENV
          fi

      - name: "Set OS-specific values (Mac)"
        if: ${{ runner.os == 'macos' }}
        shell: bash
        run: |
         echo "GENERATOR=Unix Makefiles" >> $GITHUB_ENV
         echo "CORES=$(sysctl -n hw.ncpu)" >> $GITHUB_ENV
         echo "QT_HOST=mac" >> $GITHUB_ENV
         echo "QT_ARCH=clang_64" >> $GITHUB_ENV
         echo "WORKSPACE=$(pwd)" >> $GITHUB_ENV

      - uses: actions/checkout@v3
        with:
          path: ${{github.workspace}}/src
          submodules: true

      - name: Build
        working-directory: ${{github.workspace}}
        shell: bash
        run: |
          cmake -DSUITABLE_STRUCT_ENABLE_TESTS=ON -DSUITABLE_STRUCT_ENABLE_BENCHMARK=ON -DCMAKE_BUILD_TYPE="${{matrix.build_type}}" ${{env.ARCH_FLAGS}} -G "${{env.GENERATOR}}" -S "./src" -B "./build"
          cmake --build "./build" --config "${{matrix.build_type}}" -j "${{env.CORES}}"
          cd ./build/tests
          ctest --no-tests=error --rerun-failed --output-on-failure --timeout 30 -C "${{matrix.build_type}}"

  CodeChecker:
    runs-on: [ubuntu-22.04]

    container:
      image: ihordrachuk/id-build-env:linux-clang-tl_missing-qt_5.15.2-codechecker
      options: --workdir ${{ github.workspace }}

    steps:
      - name: "Set environment variables"
        working-directory: ${{github.workspace}}
        shell: bash
        run: |
         echo "WORKSPACE=$(pwd)" >> $GITHUB_ENV

      - name: "Check out repository"
        uses: actions/checkout@v3
        with:
          path: ${{github.workspace}}/src
          submodules: true

      - name: "Prepare analysis - build"
        working-directory: ${{github.workspace}}
        run: |
          mkdir build
          echo "-/usr/include/*" >> build/skipfile.txt
          echo "-/workspace/build" >> build/skipfile.txt
          cmake -DCMAKE_EXPORT_COMPILE_COMMANDS=ON -DCMAKE_BUILD_TYPE="Debug" -S "./src" -B "./build" -G "Unix Makefiles"
          cmake --build "./build" --config "Debug" -j $(nproc --all)

      - name: "Run the analysis"
        working-directory: ${{github.workspace}}
        run: |
          mkdir codechecker-reports
          # Also 'cppcheck' can be added to analyzers list
          CodeChecker analyze -i build/skipfile.txt build/compile_commands.json -j $(nproc --all) -o report --analyzers clang-tidy clangsa
          CodeChecker parse ./report --trim-path-prefix "$(pwd)/src" | tee ./codechecker-reports/results.txt || true
          CodeChecker parse ./report --trim-path-prefix "$(pwd)/src" -e html -o ./codechecker-reports/html > /dev/null || true
          CodeChecker parse ./report --trim-path-prefix "$(pwd)/src" > /dev/null && touch ./ccOK || true

      - name: "Upload the results"
        uses: actions/upload-artifact@v3
        with:
          name: "CodeChecker report"
          path: ${{github.workspace}}/codechecker-reports

      - name: "Break build if CodeChecker reported any findings"
        working-directory: ${{github.workspace}}
        run: |
          [ -f "./ccOK" ] || exit 1
          exit 0

  Done:
    needs: [Build, CodeChecker]
    runs-on: [ubuntu-latest]
    steps:
    - name: "Done"
      shell: bash
      run: |
       echo "Done"
       exit 0
